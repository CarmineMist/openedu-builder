import logging
import os
import shutil
import subprocess
from jinja2 import Environment, PackageLoader
from typing import Any, Mapping

from openedu_builder.plugins.plugin import Plugin, PluginRunError

log = logging.getLogger(__name__)


AUTO_SIDEBAR = """const sidebars = {{
  {sidebar}: [{{type: 'autogenerated', dirName: '.'}}],
}};

module.exports = sidebars;
"""


class DocusaurusPlugin(Plugin):
    def __init__(self, input_dir: str, output_dir: str, config: Mapping[str, Any]):
        global AUTO_SIDEBAR

        super().__init__(input_dir, output_dir, config)

        self.course_name = config.get("course_name", "Course")
        self.init_command = [
            "npx",
            "create-docusaurus@latest",
            self.course_name,
            "classic",
        ]

        self.build_command = ["npm", "run", "build"]

        self.sidebar = config.get("sidebar", "auto")
        self.sidebar_name = config.get("sidebar_name", "sidebar")
        AUTO_SIDEBAR = AUTO_SIDEBAR.format(sidebar=self.sidebar_name)
        self._parse_sidebar_options()

        if config.get("init_command") is not None:
            self.init_command = config["init_command"]

    def _parse_sidebar_options(self):
        match self.sidebar:
            case "auto":
                pass
            case "custom":
                self.sidebar_location = self.config.get(
                    "sidebar_location", f"{self.input_dir}/sidebar.js"
                )
            case "js":
                pass

    def _render_js_sidebar(self):
        sidebar_template_args = {}

        structure = self.config["structure"]

        def parse_structure(k, v, path=""):
            retval = {}
            retval["title"] = k

            path += k + "/"

            if isinstance(v, list):
                retval["children"] = []
                for x in v:
                    retval["children"].append(
                        parse_structure(list(x.keys())[0], list(x.values())[0], path)
                    )
            else:
                retval["id"] = path + v.get("name", "index")

            return retval

        content = []
        for item in structure:
            k = list(item.keys())[0]
            v = list(item.values())[0]
            if k == "Introduction":
                continue
            content.append(parse_structure(k, v))

        from pprint import pprint

        pprint(content)

        sidebar_template_args["docs_only"] = self.config.get("docs_only", True)
        sidebar_template_args["content"] = content
        sidebar_template_args["sidebar_name"] = self.sidebar_name

        env = Environment(
            loader=PackageLoader("openedu_builder.plugins", "docusaurus_templates")
        )
        config_template = env.get_template("sidebar.jinja2")
        return config_template.render(**sidebar_template_args)

    def _create_sidebar(self):
        os.chdir(self.course_name)

        match self.sidebar:
            case "auto":
                with open("sidebars.js", "w") as f:
                    f.write(AUTO_SIDEBAR)
            case "custom":
                # TODO copy file
                pass
            case "js":
                with open("sidebars.js", "w") as f:
                    f.write(self._render_js_sidebar())

        os.chdir("..")

    def _copy_assets(self):
        os.chdir(self.course_name)

        from pprint import pprint

        if self.config.get("static_assets") is not None:
            for asset in self.config["static_assets"]:
                pprint(asset)
                asset_path = os.path.join(self.input_dir, asset)
                pprint(asset_path)
                if os.path.isdir(asset_path):
                    pprint(asset.split(os.path.sep)[-1])
                    shutil.copytree(
                        asset_path,
                        os.path.join("static", asset.split(os.path.sep)[-1]),
                        dirs_exist_ok=True,
                    )
                else:
                    shutil.copy(asset_path, "static")

        os.chdir("..")

    def _create_config(self):
        os.chdir(self.course_name)

        config_template_args = {}

        config_template_args["docs_only"] = self.config.get("docs_only", True)

        config_template_args["course_name"] = self.course_name
        config_template_args["logo"] = self.config.get("logo")
        config_template_args["logo_dark"] = self.config.get("logo_dark")

        config_template_args["config_meta"] = self.config.get("config_meta", {})
        config_template_args["config_socials"] = self.config.get("config_socials", {})
        config_template_args["categories"] = [
            list(x.keys())[0]
            for x in self.config.get("structure", {})
            if list(x.keys())[0] != "Introduction"
        ]
        config_template_args["copyright_string"] = self.config.get("copyright_string")

        env = Environment(
            loader=PackageLoader("openedu_builder.plugins", "docusaurus_templates")
        )
        config_template = env.get_template("config.jinja2")

        with open("docusaurus.config.js", "w") as f:
            f.write(config_template.render(**config_template_args))

        os.chdir("..")

    def _organize_files(self):
        os.chdir(self.input_dir)

        def parse_structure(k, v, path=""):
            retval = []
            path += k + "/"

            if not isinstance(v, list):
                retval.append((v["location"], path))
            else:
                for x in v:
                    retval.extend(
                        parse_structure(list(x.keys())[0], list(x.values())[0], path)
                    )

            return retval

        structure = self.config["structure"]
        to_copy = []
        for item in structure:
            k = list(item.keys())[0]
            v = list(item.values())[0]

            if k == "Introduction":
                to_copy.extend([(parse_structure(k, v)[0][0], "intro.md")])
                continue

            to_copy.extend(parse_structure(k, v))

        from pprint import pprint

        pprint(to_copy)

        for src, dest in to_copy:
            final_dst = os.path.join(self.output_dir, self.course_name, "docs", dest)
            os.makedirs(final_dst, exist_ok=True)
            shutil.copytree(src, final_dst, dirs_exist_ok=True)

        os.chdir(self.output_dir)

    def run(self):
        # Create appropriate files for auto generated sidebar
        # Create links to the files in the sidebar
        # Run docusaurus build
        if self.config.get("structure") is None:
            raise PluginRunError("structure option is required for this plugin")

        from pprint import pprint

        pprint(self.config["structure"])

        # Run init command
        os.chdir(self.output_dir)
        subprocess.run(self.init_command)

        # Folders we need to delete:
        # - blog
        try:
            shutil.rmtree(os.path.join(self.output_dir, self.course_name, "blog"))
        except FileNotFoundError:
            log.info("Blog folder already removed")

        try:
            shutil.rmtree(os.path.join(self.output_dir, self.course_name, "docs"))
        except FileNotFoundError:
            log.info("Docs folder already removed")

        os.mkdir(os.path.join(self.output_dir, self.course_name, "docs"))

        # Files we need to edit:
        # - docusaurus.config.js
        self._create_config()
        # - sidebars.js
        self._create_sidebar()

        # Copy or link documentation in the right place
        self._organize_files()

        # Copy extra static assets and files
        self._copy_assets()

        # Create dummy intro if user did not provide one
        if not os.path.exists(
            os.path.join(self.output_dir, self.course_name, "docs", "intro.md")
        ):
            with open(
                os.path.join(self.output_dir, self.course_name, "docs", "intro.md"), "w"
            ) as f:
                if self.config.get("docs_only", True):
                    f.write("""---
slug: /
---
""")
                f.write(
                    """# Introduction
This is a dummy introduction page required by Docusaurus. Please provide your own introduction page in the `structure` option of the `docusaurus` plugin.
"""
                )

        os.chdir(self.course_name)
        if self.config.get("docs_only", True):
            try:
                os.remove("src/pages/index.js")
            except FileNotFoundError:
                log.info("index.js already removed")

        subprocess.run(self.build_command)